---
swagger: "2.0"
info:
  version: "0.0.0-prealpha"
  title: "fave"
  contact:
    name: "fave"
    url: "https://github.com/fairDataSociety/FaVe"
    email: "sabyasachi@datafund.io"
basePath: "/v1"
tags:
- name: "fave"
  description: "Everything about your fave"
consumes:
- "application/yaml"
- "application/json"
produces:
- "application/json"
paths:
  /:
    get:
      description: "Home. Discover the REST API"
      operationId: "fave.root"
      parameters: []
      responses:
        "200":
          description: "fave is alive and ready to serve content"
  /collections:
    post:
      description: "Create a new collection."
      operationId: "fave.createCollection"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Collection"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "collection added"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Malformed request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /collections/{collection}:
    delete:
      description: "Delete a collection."
      operationId: "fave.deleteCollection"
      parameters:
      - name: "collection"
        in: "path"
        description: "Collection name"
        required: true
        type: "string"
        x-exportParamName: "Collection"
      responses:
        "200":
          description: "collection removed"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Malformed request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /documents:
    get:
      summary: "Retrieve a document based on query parameters"
      parameters:
      - name: "property"
        in: "query"
        description: "The property to filter the document by"
        required: true
        type: "string"
        x-exportParamName: "Property"
      - name: "value"
        in: "query"
        description: "The value of the property to filter the document by"
        required: true
        type: "string"
        x-exportParamName: "Value"
      - name: "collection"
        in: "query"
        description: "The collection to use for this query"
        required: true
        type: "string"
        x-exportParamName: "Collection"
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/Document"
        "400":
          description: "Malformed request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: "Document not found"
    post:
      description: "Add documents into a collection."
      operationId: "fave.addDocuments"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/AddDocumentsRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "collection added"
          schema:
            $ref: "#/definitions/OKResponse"
        "400":
          description: "Malformed request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /nearest-documents:
    post:
      description: "Get nearest documents for a collection."
      operationId: "fave.getNearestDocuments"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/NearestDocumentsRequest"
        x-exportParamName: "Body"
      responses:
        "200":
          description: "collection added"
          schema:
            $ref: "#/definitions/NearestDocumentsResponse"
        "400":
          description: "Malformed request."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: "Unauthorized or invalid credentials."
        "403":
          description: "Forbidden"
          schema:
            $ref: "#/definitions/ErrorResponse"
        "422":
          description: "Request body is well-formed (i.e., syntactically correct),\
            \ but semantically erroneous."
          schema:
            $ref: "#/definitions/ErrorResponse"
        "500":
          description: "An error has occurred while trying to fulfill the request.\
            \ Most likely the ErrorResponse will contain more information about the\
            \ error."
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  OKResponse:
    type: "object"
    properties:
      message:
        type: "string"
    description: "An ok response given by FaVe end-points."
    example:
      message: "message"
  ErrorResponse:
    type: "object"
    properties:
      error:
        type: "array"
        items:
          $ref: "#/definitions/ErrorResponse_error"
    description: "An error response given by FaVe end-points."
  Collection:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the collection as URI relative to the schema URL."
      indexes:
        type: "object"
        description: "The indexes of the collection."
        properties: {}
    example:
      indexes: "{}"
      name: "name"
  PropertySchema:
    type: "object"
    description: "This is an open object, with OpenAPI Specification 3.0 this will\
      \ be more detailed."
    additionalProperties: true
  Document:
    type: "object"
    properties:
      properties:
        $ref: "#/definitions/PropertySchema"
      id:
        type: "string"
        format: "uuid"
        description: "ID of the Object."
    example:
      id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
      properties: {}
  AddDocumentsRequest:
    type: "object"
    properties:
      documents:
        type: "array"
        description: "The actual list of Objects."
        items:
          $ref: "#/definitions/Document"
      name:
        type: "string"
        description: "Name of the collection as URI relative to the schema URL."
      propertiesToIndex:
        type: "array"
        description: "Array of properties to be indexed."
        items:
          type: "string"
    description: "Add the documents to the collection."
    example:
      documents:
      - id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        properties: {}
      - id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        properties: {}
      propertiesToIndex:
      - "propertiesToIndex"
      - "propertiesToIndex"
      name: "name"
  NearestDocumentsRequest:
    type: "object"
    properties:
      text:
        type: "string"
        description: "The text to search for."
      name:
        type: "string"
        description: "Name of the collection as URI relative to the schema URL."
      distance:
        type: "number"
        format: "float"
    description: "Get the nearest documents from the collection."
    example:
      distance: 0.8008282
      name: "name"
      text: "text"
  NearestDocumentsResponse:
    type: "object"
    properties:
      documents:
        type: "array"
        description: "The actual list of Objects."
        items:
          $ref: "#/definitions/Document"
      name:
        type: "string"
        description: "Name of the collection as URI relative to the schema URL."
    description: "Response for the Nearest documents request"
    example:
      documents:
      - id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        properties: {}
      - id: "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        properties: {}
      name: "name"
  ErrorResponse_error:
    type: "object"
    properties:
      message:
        type: "string"
parameters: {}
externalDocs:
  url: "https://github.com/fairDataSociety/FaVe"
